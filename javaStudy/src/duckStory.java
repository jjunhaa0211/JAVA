
/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
*/

//1번
//class duckStory {
//    public static void main(String[] args) {
//        duck a = new duck();
//        a.fly();
//        // 출력 : 오리가 날개로 날아갑니다.
//    }
//}
//
//class duck {
//    static void fly() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//2번
//        - D1 요구 : 오리를 생성하고 날게하시오.
//        - D1 완료 : 클래스와 메서드를 만들어서 처리
//        - D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
//        */

//class duckStory {
//    public static void main(String[] args) {
//        mallard a = new mallard();
//        a.fly();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        whiteDuck b = new whiteDuck();
//        b.fly();
//        // 출력 : 오리가 날개로 날아갑니다.
//    }
//}
//
//class duck {
//    void fly() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//
//class mallard extends duck {
//
//}
//
//class whiteDuck extends duck {
//
//}
//3번
/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
- D1 완료 : 클래스와 메서드를 만들어서 처리
- D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
- D2 완료 : 클래스와 메서드를 만들어서 처리
- D3 요구 : 오리 계열의 클래스에 날다 메서드가 중복되었습니다. 중복을 제거해주세요.
*/
//
//class duckStory {
//    public static void main(String[] args) {
//        청둥오리 a청둥오리 = new 청둥오리();
//        a청둥오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        흰오리 a흰오리 = new 흰오리();
//        a흰오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//    }
//}
//
//class 오리 {
//    void 날다() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//
//class 흰오리 {
//    void 날다() {
//        System.out.println("흰오리가 날개로 날아갑니다.");
//    }
//}
//
//class 청둥오리 {
//    void 날다() {
//        System.out.println("청둥오리가 날개로 날아갑니다.");
//    }
//}
//4번
/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
- D1 완료 : 클래스와 메서드를 만들어서 처리
- D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
- D2 완료 : 클래스와 메서드를 만들어서 처리
- D3 요구 : 오리 계열의 클래스에 날다 메서드가 중복되었습니다. 중복을 제거해주세요.
- D3 완료 : 상속을 사용해서 처리
- D4 요구 : 게임의 재미를 위하여 고무오리를 추가하고 날게 하시오.
*/

//5번
//class duckStory {
//    public static void main(String[] args) {
//        청둥오리 a청둥오리 = new 청둥오리();
//        a청둥오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        흰오리 a흰오리 = new 흰오리();
//        a흰오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        고무오리 a고무오리 = new 고무오리();
//        a고무오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//    }
//}
//
//class 오리 {
//    void 날다() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//
//// 오리 => 부모 클래스
//// 흰오리 => 자식 클래스
//// 흰오리 extends 오리 => 흰오리가 오리의 능력을 물려 받는다.
//// "`흰오리`는 `오리`이다." 라고 자바에게 알려준다.
//// `A 는 B 이다.` 테스트에 통과하는 것만 상속이 가능하다.
//// 클래스와 객체는 명사이다.
//// 메서드는 동사이다.
//class 흰오리 extends 오리 {
//
//}
//
//class 청둥오리 extends 오리 {
//}
//
//class 고무오리 extends 오리 {
//
//}
/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
- D1 완료 : 클래스와 메서드를 만들어서 처리
- D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
- D2 완료 : 클래스와 메서드를 만들어서 처리
- D3 요구 : 오리 계열의 클래스에 날다 메서드가 중복되었습니다. 중복을 제거해주세요.
- D3 완료 : 상속을 사용해서 처리
- D4 요구 : 게임의 재미를 위하여 고무오리를 추가하고 날게 하시오.
- D4 완료 : 클래스와 메서드를 만들어서 처리
- D5 요구 : 주말 주주회의에서 고무오리가 하늘을 날아다니는 것에 대해서 태클이 들어왔습니다. 고무오리 계열은 하늘을 날 수 없게 해주세요.
*/

//class duckStory {
//    public static void main(String[] args) {
//        청둥오리 a청둥오리 = new 청둥오리();
//        a청둥오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        흰오리 a흰오리 = new 흰오리();
//        a흰오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        고무오리 a고무오리 = new 고무오리();
//        a고무오리.날다();
//        // 출력 : 저는 날 수 없어요. ㅜㅠ
//    }
//}
//
//class 오리 {
//    void 날다() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//
//// 오리 => 부모 클래스
//// 흰오리 => 자식 클래스
//// 흰오리 extends 오리 => 흰오리가 오리의 능력을 물려 받는다.
//// "`흰오리`는 `오리`이다." 라고 자바에게 알려준다.
//// `A 는 B 이다.` 테스트에 통과하는 것만 상속이 가능하다.
//// 클래스와 객체는 명사이다.
//// 메서드는 동사이다.
//class 흰오리 extends 오리 {
//
//}
//
//class 청둥오리 extends 오리 {
//}
//
//class 고무오리 extends 오리 {
//    void 날다() {
//        System.out.println("저는 날 수 없어요");
//    }
//}

/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
*/

//class Main {
//    public static void main(String[] args) {
//        오리 a오리 = new 오리();
//        a오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//    }
//}
//
//class 오리 {
//    void 날다() {
//        System.out.println("오리 날다");
//    }
//}

/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
- D1 완료 : 클래스와 메서드를 만들어서 처리
- D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
*/

//class Main {
//    public static void main(String[] args) {
//        청둥오리 a청둥오리 = new 청둥오리();
//        a청둥오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        흰오리 a흰오리 = new 흰오리();
//        a흰오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//    }
//}
//
//class 오리 {
//    void 날다() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//
//class 청둥오리 extends 오리 {
//
//}
//
//class 흰오리 extends 오리 {
//
//}

/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
- D1 완료 : 클래스와 메서드를 만들어서 처리
- D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
- D2 완료 : 클래스와 메서드를 만들어서 처리
- D3 요구 : 오리 계열의 클래스에 날다 메서드가 중복되었습니다. 중복을 제거해주세요.
*/

//class Main {
//    public static void main(String[] args) {
//        청둥오리 a청둥오리 = new 청둥오리();
//        a청둥오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        흰오리 a흰오리 = new 흰오리();
//        a흰오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//    }
//}
//
//class 오리 {
//    void 날다() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//
//class 흰오리 extends 오리 {
//}
//
//class 청둥오리 extends 오리 {
//}
/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
- D1 완료 : 클래스와 메서드를 만들어서 처리
- D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
- D2 완료 : 클래스와 메서드를 만들어서 처리
- D3 요구 : 오리 계열의 클래스에 날다 메서드가 중복되었습니다. 중복을 제거해주세요.
- D3 완료 : 상속을 사용해서 처리
- D4 요구 : 게임의 재미를 위하여 고무오리를 추가하고 날게 하시오.
*/

//class Main {
//    public static void main(String[] args) {
//        청둥오리 a청둥오리 = new 청둥오리();
//        a청둥오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        흰오리 a흰오리 = new 흰오리();
//        a흰오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        고무오리 a고무오리 = new 고무오리();
//        a고무오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//    }
//}
//
//class 오리 {
//    void 날다() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//
//// 오리 => 부모 클래스
//// 흰오리 => 자식 클래스
//// 흰오리 extends 오리 => 흰오리가 오리의 능력을 물려 받는다.
//// "`흰오리`는 `오리`이다." 라고 자바에게 알려준다.
//// `A 는 B 이다.` 테스트에 통과하는 것만 상속이 가능하다.
//// 클래스와 객체는 명사이다.
//// 메서드는 동사이다.
//class 흰오리 extends 오리 {
//
//}
//
//class 청둥오리 extends 오리 {
//}
//
//class 고무오리 extends 오리 {
//
//}
/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
- D1 완료 : 클래스와 메서드를 만들어서 처리
- D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
- D2 완료 : 클래스와 메서드를 만들어서 처리
- D3 요구 : 오리 계열의 클래스에 날다 메서드가 중복되었습니다. 중복을 제거해주세요.
- D3 완료 : 상속을 사용해서 처리
- D4 요구 : 게임의 재미를 위하여 고무오리를 추가하고 날게 하시오.
- D4 완료 : 클래스와 메서드를 만들어서 처리
- D5 요구 : 주말 주주회의에서 고무오리가 하늘을 날아다니는 것에 대해서 태클이 들어왔습니다. 고무오리 계열은 하늘을 날 수 없게 해주세요.
*/

//class Main {
//    public static void main(String[] args) {
//        청둥오리 a청둥오리 = new 청둥오리();
//        a청둥오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        흰오리 a흰오리 = new 흰오리();
//        a흰오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        고무오리 a고무오리 = new 고무오리();
//        a고무오리.날다();
//        // 출력 : 저는 날 수 없어요. ㅜㅠ
//    }
//}
//
//class 오리 {
//    void 날다() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//
//// 오리 => 부모 클래스
//// 흰오리 => 자식 클래스
//// 흰오리 extends 오리 => 흰오리가 오리의 능력을 물려 받는다.
//// "`흰오리`는 `오리`이다." 라고 자바에게 알려준다.
//// `A 는 B 이다.` 테스트에 통과하는 것만 상속이 가능하다.
//// 클래스와 객체는 명사이다.
//// 메서드는 동사이다.
//class 흰오리 extends 오리 {
//
//}
//
//class 청둥오리 extends 오리 {
//}
//
//class 고무오리 extends 오리 {
//    void 날다() {
//        System.out.println("고무오리는 날지 못합니다");
//    }
//}
/* 가정
우리는 게임개발회사에 입사했다.
우리에게는 성격좋은 사수 한명이 있다.
내가 개발할 게임은 오리시뮬레이션 게임이다.
선임이 나의 개발을 도와주진 않지만 조언은 해준다.
*/

/* 요구사항
- D1 요구 : 오리를 생성하고 날게하시오.
- D1 완료 : 클래스와 메서드를 만들어서 처리
- D2 요구 : 게임의 디테일을 살리기 위해서 `청둥오리`와 `흰오리`를 생성하고 날게하시오.
- D2 완료 : 클래스와 메서드를 만들어서 처리
- D3 요구 : 오리 계열의 클래스에 날다 메서드가 중복되었습니다. 중복을 제거해주세요.
- D3 완료 : 상속을 사용해서 처리
- D4 요구 : 게임의 재미를 위하여 고무오리를 추가하고 날게 하시오.
- D4 완료 : 클래스와 메서드를 만들어서 처리
- D5 요구 : 주말 주주회의에서 고무오리가 하늘을 날아다니는 것에 대해서 태클이 들어왔습니다. 고무오리 계열은 하늘을 날 수 없게 해주세요.
- D5 완료 : 메서드 오버라이드를 사용해서 처리
- D6 요구 : 고무오리가 반응이 좋습니다. 고무2오리를 추가하고 날게 해주세요.
*/

//class Main {
//    public static void main(String[] args) {
//        청둥오리 a청둥오리 = new 청둥오리();
//        a청둥오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        흰오리 a흰오리 = new 흰오리();
//        a흰오리.날다();
//        // 출력 : 오리가 날개로 날아갑니다.
//
//        고무오리 a고무오리 = new 고무오리();
//        a고무오리.날다();
//        // 출력 : 저는 날 수 없어요. ㅜㅠ
//
//        고무2오리 a고무2오리 = new 고무2오리();
//        a고무2오리.날다();
//        // 출력 : 저는 날 수 없어요. ㅜㅠ
//    }
//}
//
//class 오리 {
//    void 날다() {
//        System.out.println("오리가 날개로 날아갑니다.");
//    }
//}
//
//// 오리 => 부모 클래스
//// 흰오리 => 자식 클래스
//// 흰오리 extends 오리 => 흰오리가 오리의 능력을 물려 받는다.
//// "`흰오리`는 `오리`이다." 라고 자바에게 알려준다.
//// `A 는 B 이다.` 테스트에 통과하는 것만 상속이 가능하다.
//// 클래스와 객체는 명사이다.
//// 메서드는 동사이다.
//class 흰오리 extends 오리 {
//
//}
//
//class 청둥오리 extends 오리 {
//}
//
//class 고무오리 extends 오리 {
//    // 메서드 재정의 라고 합니다.
//    // 메서드 오버라이드 라고도 합니다.
//    // 메서드 재정의 => 부모가 물려준 능력을 다시 구현한다.
//    void 날다() {
//        System.out.println("저는 날 수 없어요. ㅜㅠ");
//    }
//}
//
//class 고무2오리 extends 고무오리 {
//
//}

// 문제 : 아래와 같이 출력되도록 해주세요.
// 조건 : 소스코드 중복이 없어야 합니다.
// 조건 : 복잡한 상속을 써도 됩니다.

class Main {
    public static void main(String[] args) {
        System.out.println("== 청둥오리 ==");
        청둥오리 a청둥오리 = new 청둥오리();
        a청둥오리.날다(); // 오리가 날개로 날아갑니다.
        a청둥오리.수영하다(); // 오리가 물갈퀴로 수영합니다.

        System.out.println("== 흰오리 ==");
        흰오리 a흰오리 = new 흰오리();
        a흰오리.날다(); // 오리가 날개로 날아갑니다.
        a흰오리.수영하다(); // 오리가 물갈퀴로 수영합니다.

        System.out.println("== 고무오리 ==");
        고무오리 a고무오리 = new 고무오리();
        a고무오리.날다(); // 저는 못 날아요 ㅠㅠ
        a고무오리.수영하다(); // 오리가 물에 둥둥 떠다닙니다.

        System.out.println("== 고무2오리 ==");
        고무2오리 a고무2오리 = new 고무2오리();
        a고무2오리.날다(); // 저는 못 날아요 ㅠㅠ
        a고무2오리.수영하다(); // 오리가 물에 둥둥 떠다닙니다.

        System.out.println("== 로봇오리 ==");
        로봇오리 a로봇오리 = new 로봇오리();
        a로봇오리.날다(); // 오리가 날개로 날아갑니다.
        a로봇오리.수영하다(); // 오리가 물에 둥둥 떠다닙니다.
    }
}
class 오리 {
    void 날다() {
        System.out.println("오리가 날개로 날아갑니다.");
    }

    void 수영하다() {
        System.out.println("오리가 물갈퀴로 수영합니다.");
    }
}
class 흰오리 extends 오리 { }
class 청둥오리 extends 오리 { }
class 고무오리 extends 로봇오리 {
    void 날다() {
        System.out.println("저는 못 날아요. ㅜㅠ");
    }

    void 수영하다() {
        System.out.println("오리가 물에 둥둥 떠다닙니다.");
    }
}
class 고무2오리 extends 고무오리 { }

class 로봇오리 extends 오리 {
    void 수영하다() {
        System.out.println("오리가 물에 둥둥 떠다닙니다");
    }
}